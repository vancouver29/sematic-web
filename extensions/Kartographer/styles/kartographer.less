/**
 * CSS Classes Definitions
 *
 * .mw-kartographer-maplink:
 *     Represents a <maplink> element as output by the Parser.
 *     May or may not be an interactive link yet (meanwhile JS gets loaded).
 *
 * .mw-kartographer-map
 *    Represents a <mapframe> element as output by the Parser.
 *    May or may not be an interactive map yet (meanwhile JS gets loaded)
 *
 * .mw-kartographer-link
 *     Represents an interactive map link.
 *     The class is added when the element becomes an interactive link.
 *     May or may not be a <maplink> or <mapframe> (if created via Developer API)
 *
 * .mw-kartographer-interactive
 *    Represents an interactive map.
 *    The class is added when the element becomes an interactive map.
 *
 * .mw-kartographer-mapDialog-map
 *    Represents an interactive map within a full screen map dialog.
 *
 * .mw-kartographer-static
 *    Represents an interactive map that was made static afterward because the
 *    viewport is too small.
 *
 * In practice:
 *
 * - <maplink> will have .mw-kartographer-maplink first,
 *                       .mw-kartographer-link then.
 *
 * - <mapframe> will have .mw-kartographer-map first,
 *                        .mw-kartographer-link then, if displaying static snapshot.
 *                        .mw-kartographer-interactive then, if directly interactive.
 */

.mw-kartographer-mapDialog-map {
	position: absolute;
	top: 0;
	bottom: 4.5em;
	left: 0;
	right: 0;
	z-index: 1;
}

.mw-kartographer-error {
	display: inline-block;
	background: #ffc0cb;
}

// Bidi overrides for RTL interface
.mw-kartographer-interactive {
	.leaflet-control-container {
		.leaflet-control {
			&.leaflet-control-scale-line {
				// Should never flip, since '10km' etc is not
				// currently translateable in leaflet itself
				/* @noflip */
				direction: ltr;
			}

			&.leaflet-control-attribution {
				// Should go by interface direction
				direction: ltr;
			}
		}
	}
}

.mw-kartographer-static {
	.leaflet-control-container {
		.leaflet-top .leaflet-control {
			display: none;
		}
		.leaflet-top .leaflet-control-static {
			display: block;
		}
	}
	.leaflet-clickable {
		pointer-events: none;
	}
	&.leaflet-container {
		cursor: default;
	}
}

.mw-kartographer-map {
	direction: ltr;
	position: relative;
	background-position: center;
	background-repeat: no-repeat;
	background-size: contain;
	display: block;
	font-size: 14px;

	&.mw-kartographer-link {
		display: block;
	}

	&.leaflet-container {
		background-size: contain;
	}
}

.mw-kartographer-fullScreen {
	position: absolute;
	top: 10px;
	right: 10px;
	margin-right: 0;
}

.mw-kartographer-container:not( .mw-kartographer-full ) {
	max-width: 100%;

	/* Fixes `align=center` use case */
	&.center {
		margin-left: auto;
		margin-right: auto;
		display: block;
	}

	&.thumb {
		.thumbinner {
			max-width: 100%;

			> .mw-kartographer-map {
				width: 100%;
			}
		}
	}
}

.mw-kartographer-container.mw-kartographer-full {
	width: 100%;
}

// Define `.floatright` and `.floatleft` for `a` elements.
// FIXME: we should not have to define this here.
/* @noflip */
a.floatright {
	float: right;
	clear: right;
	margin: 0 0 1em 1em;
}

/* @noflip */
a.floatleft {
	float: left;
	clear: left;
	margin: 0.3em 0.5em 0.5em 0;
}
